library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity spi_slave is
	generic
	(
		cpol	: std_logic;
		cpha	: std_logic
	);
	port
	(
		sys_clk0	: in std_logic;

		ss			: in std_logic;
		clk		: in std_logic;
		mosi		: in std_logic;
		miso		: out std_logic;
		
		led1		: out std_logic;
		
		reg_encoder1 : in std_logic_vector( 31 downto 0 );
		reg_encoder2 : in std_logic_vector( 31 downto 0 )
	);
end spi_slave;

architecture behv of spi_slave is
	type spi_rx_state is ( spi_rx_s0, spi_rx_s1, spi_rx_s2 );--, spi_rx_s3, spi_rx_s4 );
	type spi_tx_state is ( spi_tx_s0, spi_tx_s1, spi_tx_s2, spi_tx_s3, spi_tx_s4 );
	
	signal rx_buf : std_logic_vector( 63 downto 0 );
	signal rx_bit_counter : integer range 0 to 63;
	signal rx_bit_counter_up_value : integer range 0 to 63;
	signal current_spi_rx_state	: spi_rx_state := spi_rx_s0;

begin

	-- BYTE[ 0 ]:
	-- 0 - Reset ENCODER 1 \ Reset ENCODER 1/2
	-- 1 - Reset ENCODER 2 /
	-- 2 - Read ENCODER 1
	-- 3 - Read ENCODER 2
	-- 4 -
	-- 5 -
	-- 6 -
	-- 7 -
	
	process( ss, clk )
	begin
		if( ss = '1' ) then
			current_spi_rx_state <= spi_rx_s0;
			rx_buf <= ( others => '0' );
			rx_bit_counter <= 0;
			miso <= 'Z';
		else
			if( rising_edge( clk ) ) then
				rx_buf <= rx_buf( rx_buf'length - 2 downto 0 ) & mosi;
				rx_bit_counter <= rx_bit_counter + 1;
				
				case current_spi_rx_state is
					when spi_rx_s0 => miso <= '0';
					when spi_rx_s1 => miso <= rx_buf( rx_bit_counter );
						led1 <=  '0';
					when spi_rx_s2 => miso <= reg_encoder1( 40 - rx_bit_counter );
						led1 <=  '1';
				end case;
			
				if( rx_bit_counter = rx_bit_counter_up_value ) then
					case current_spi_rx_state is
					when spi_rx_s0 =>
						case rx_buf( 7 downto 0 ) is
							when "00000001" => current_spi_rx_state <= spi_rx_s0;
							when "00000010" => current_spi_rx_state <= spi_rx_s0;
							when "00000011" => current_spi_rx_state <= spi_rx_s0;
							
							when "11000111" => current_spi_rx_state <= spi_rx_s1;
							when "11100111" => current_spi_rx_state <= spi_rx_s2;
							when others => current_spi_rx_state <= spi_rx_s0;
						end case;
					when spi_rx_s1 => current_spi_rx_state <= spi_rx_s0;
					when spi_rx_s2 => current_spi_rx_state <= spi_rx_s0;
					end case;
				end if;

			end if;
		end if;
	end process;
	
	process( current_spi_rx_state )
	begin
		case current_spi_rx_state is
		when spi_rx_s0 => rx_bit_counter_up_value <= 8;
		when spi_rx_s1 => rx_bit_counter_up_value <= 8 + 32;
		when spi_rx_s2 => rx_bit_counter_up_value <= 8 + 32;
		end case;
	end process;
end;